# -*- coding: utf-8 -*-
"""Visualizing the predictions with different visualizations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nGZz6CfK4T3WR82xC-Sgf6Zuh9w5oCZ6
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

df_pred = pd.read_csv("/content/drive/My Drive/phd/notebooks/visual_survey/predictions_211117.csv")
df_pred=np.expm1(df_pred)
df_pred.columns = (df_pred.columns.astype(int)+1).astype(str)
preds = df_pred.values
df_pred["h"]=df_pred.index

#EPS Gram
df_pred["h1"]=df_pred["h"]-.5
df_pred["h2"]=df_pred["h"]+.5

df_pred["hsbl"]=df_pred["h"]-.2
df_pred["hsbh"]=df_pred["h"]+.2

df_pred["hbbl"]=df_pred["h"]-.4
df_pred["hbbh"]=df_pred["h"]+.4

df_pred["hour"] = pd.date_range('2017-11-21 11:00', '2017-11-22 09:00', freq='H')

from datetime import timedelta

df_pred["hour1"]=df_pred["hour"]-timedelta(minutes=30)
df_pred["hour2"]=df_pred["hour"]+timedelta(minutes=30)

df_pred["hoursbl"]=df_pred["hour"]-timedelta(minutes=10)
df_pred["hoursbh"]=df_pred["hour"]+timedelta(minutes=10)

df_pred["hourbbl"]=df_pred["hour"]-timedelta(minutes=20)
df_pred["hourbbh"]=df_pred["hour"]+timedelta(minutes=20)

df_pred.head()

!pip install colour

from colour import Color

red = Color("#c6e3f9")
blue = Color("#B19CD9")
colors = list(red.range_to(blue, 50))

# time_range = pd.date_range('2017-11-21 11:00', '2017-11-22 09:00', freq='H')
time_range = pd.date_range('2017-04-23 11:00', '2017-04-24 09:00', freq='H')

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline

fig = plt.figure(figsize=(15,5))
plt.box(on=False)
plt.gca().yaxis.grid(True)
plt.rcParams.update({'font.size': 15})
plt.title(f"Evolution of NO2 over time and Predictions for QGB") 

hours = time_range
for i in np.arange(1,50):
    plt.fill_between(hours, np.array(preds)[:,i], np.array(preds)[:,-i],color=colors[i].get_rgb())

# Let's do it with altair

import altair as alt

# Interval line
total_chart = alt.Chart(df_pred).mark_line().encode(
    x=alt.X('yearmonthdatehours(hour):O',title="Time of Day",axis=alt.Axis(grid=True)),
    y=alt.Y('50',scale=alt.Scale(zero=False),title="NO2 level"),
    color=alt.value("lightblue")
)+\
alt.Chart(df_pred).mark_line().encode(
    x=alt.X('h', axis=alt.Axis(labels=False),title=""),
    y=alt.Y('5',scale=alt.Scale(zero=False),title="")
)+\
alt.Chart(df_pred).mark_line().encode(
    x=alt.X('h', axis=alt.Axis(labels=False),title=""),
    y=alt.Y('95',scale=alt.Scale(zero=False),title="")
)
total_chart.title = 'NO2 prediction levels - Confidence interval'
total_chart.width = 600
total_chart.save("ci_chart.html")
total_chart

cdf = pd.DataFrame()
cdf["color"]=list(map(lambda e:e.get_hex(),colors))+list(reversed(list(map(lambda e:e.get_hex(),colors))))
cdf["range"]=  cdf.index
rangelabel = alt.Chart(cdf[cdf["range"]%5==0]).mark_rect().encode(
    y=alt.Y("range:N",sort='descending',title="",axis=alt.Axis(orient="right")),
    tooltip="range",
    color=alt.Color("range:N",scale=alt.Scale(range=cdf["color"][cdf["range"]%5==0].values), legend=None)
).properties(
    height=250
)
rangelabel

# Gradient
charts = []
for i in np.arange(1,50,5):
  charts.append(alt.Chart(df_pred).mark_area().encode(
    x=alt.X('yearmonthdatehours(hour):O',title="Time of Day",axis=alt.Axis(grid=True)),
    y=alt.Y(str(i),scale=alt.Scale(zero=False),title="NO2 level"),
    y2=alt.Y2(str(100-i)),
    color=alt.value(colors[i].get_hex())
  ))
total_chart = sum(charts)
total_chart.title = 'NO2 prediction levels - Gradient Chart'
total_chart.width = 600
total_chart

(total_chart|rangelabel).save("chart_gradient_230417.html")

t=alt.layer( 

alt.Chart(df_pred).mark_rule().encode(
    x=alt.X('yearmonthdatehours(hour):O',axis=alt.Axis(labels=True,grid=False,orient="top",ticks=True,labelExpr="isDate(datum.value) ? datum.label : '' "),title=""),
    y=alt.Y('1',scale=alt.Scale(zero=False),title="NO2 level"),
    y2=alt.Y2("99")
),

alt.Chart(df_pred).mark_rect().encode(
    x=alt.X('hoursbl',title=""),
    x2='hoursbh',
    y=alt.Y('10',scale=alt.Scale(zero=False),title=""),
    y2=alt.Y2("90")
)

)


t

# EPS Gram
total_chart=alt.Chart(df_pred).mark_rule().encode(
    x=alt.X('yearmonthdatehours(hour):O',axis=alt.Axis(labels=False,grid=False,orient="top",labelExpr="isDate(datum.value) ? datum.label : '' "),title=""),
    y=alt.Y('1',scale=alt.Scale(zero=False),title="NO2 level"),
    y2=alt.Y2("99")
)+\
alt.Chart(df_pred).mark_rect().encode(
    x=alt.X('hoursbl',axis=alt.Axis(labels=False,orient="top",grid=False),title=""),
    x2='hoursbh',
    y=alt.Y('10',scale=alt.Scale(zero=False),title=""),
    y2=alt.Y2("90")
)+\
alt.Chart(df_pred).mark_rect().encode(
    x=alt.X('hourbbl',axis=alt.Axis(labels=False,orient="top",grid=False),title=""),
    x2='hourbbh',
    y=alt.Y('25',scale=alt.Scale(zero=False),title=""),
    y2=alt.Y2("75")
)+\
alt.Chart(df_pred).mark_rect().encode(
    x=alt.X('hour1',axis=alt.Axis(labels=False,orient="top",grid=False),title=""),
    x2='hour2',
    y=alt.Y('50',scale=alt.Scale(zero=False),title=""),
    y2=alt.Y2('51'),
    color=alt.value("white")
)+\
alt.Chart(df_pred).mark_rect().encode(
    x=alt.X('yearmonthdatehours(hour):O',title="Time of Day",axis=alt.Axis(orient="bottom",grid=False,labels=True,labelExpr="isDate(datum.value) ? datum.label : '' ")),
    y=alt.value(0),
    opacity=alt.value(0)
)

total_chart.title = 'NO2 prediction levels - Box Plot Chart'
total_chart.width = 600
total_chart.save("chart_box_211117.html")
total_chart

# Time Series Dot Plot
charts = []
for i in np.arange(5,96,10):
  charts.append(alt.Chart(df_pred).mark_point().encode(
    x=alt.X('yearmonthdatehours(hour):O',title="Time of Day",axis=alt.Axis(orient="bottom")),
    y=alt.Y(str(i),scale=alt.Scale(zero=False),title="NO2 level")
  ))
total_chart = sum(charts)
total_chart+=alt.Chart(df_pred).mark_line().encode(
    x=alt.X('yearmonthdatehours(hour):O',title="Time of Day",axis=alt.Axis(grid=True)),
    y=alt.Y('50',scale=alt.Scale(zero=False),title="NO2 level"),
    color=alt.value("lightblue")
)

total_chart.title = 'NO2 prediction levels - Dot Chart'
total_chart.width = 600

total_chart

total_chart.save("chart_dot_211117.html")

# 21 Nov

# what is the probability of the NO2 levels being between 150 and 200 on November 21st at 22:00 ?
# what is the probability of the NO2 levels being between 70 and 120 on November 21st at 14:00 ?
# what is the probability of the NO2 levels being above 150 on November 22nd at 09:00 ?
# what is the probability of the NO2 levels being between 50 and 100 on November 21st at 11:00 ?
# what is the probability of the NO2 levels being above 200 on November 21st at 20:00 ?

# 23 April

# what is the probability of the NO2 levels being between 150 and 200 on April 23rd at 21:00 ?
# what is the probability of the NO2 levels being between 70 and 120 on April 24th at 03:00 ?
# what is the probability of the NO2 levels being above 40 on April 23rd at 19:00 ?
# what is the probability of the NO2 levels being between 60 and 100 on April 24th at 01:00 ?
# what is the probability of the NO2 levels being above 80 on April 24th at 08:00 ?

# First, we select the hour
#df_pred[df_pred["hour"].dt.strftime("%Y-%m-%d %H:%M:%S")=="2017-11-21 14:00:00"]

# Then, we select the boundaries
bottom_limit = 200
up_limit = 420
df_select = df_pred[df_pred["hour"].dt.strftime("%Y-%m-%d %H:%M:%S")=="2017-11-21 20:00:00"]

bottom = np.where(df_select[np.arange(1,100).astype(str)]>bottom_limit)[1][0]
up = np.where(df_select[np.arange(1,100).astype(str)]>up_limit)[1][0]

up-bottom



